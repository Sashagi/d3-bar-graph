<html>
  <head>
    <meta charset="utf-8" />
    <script src="https://d3js.org/d3.v6.min.js"></script>

    <script src="https://d3js.org/d3-selection-multi.v1.min.js"></script>
  </head>
  <style type="text/css">
    button {
      display: flex;
      justify-content: center;
    }
  </style>
  <body>
    <svg width="700" height="500"></svg>
    <script>
      const arr = [
        {
          name: "A",
          dataset_1: 5,
          dataset_2: 6,
        },
        {
          name: "B",
          dataset_1: 7,
          dataset_2: 22,
        },
        {
          name: "C",
          dataset_1: 33,
          dataset_2: 23,
        },
        {
          name: "D",
          dataset_1: 20,
          dataset_2: 12,
        },
        {
          name: "E",
          dataset_1: 21,
          dataset_2: 15,
        },
        {
          name: "F",
          dataset_1: 15,
          dataset_2: 18,
        },
      ];
      //function for adding dataset
      let counter = 2;
      const add_set = (arr) => {
        const ran = () => Math.floor(Math.random() * 20 + 1);
        const add = (arr) => {
          counter++;
          arr.map((i) => (i[`dataset_${counter}`] = ran()));
        };
        add(arr);
      };
      //function for removing dataset
      const remove_set = (arr) => {
        arr.map((i) => delete i[`dataset_${counter}`]);
        counter >= 1 ? counter-- : counter;
      };
      let keys, stack;
      const updateData = () => {
        keys = Object.keys(arr[0]).filter((i) => i !== "name");
        stack = d3
          .stack()
          .keys(keys)(arr)
          .map((d) => (d.forEach((v) => (v.key = d.key)), d));
      };

      //initial variables
      let svg, width, height, g, groups, rect;

      let margin = { left: 50, right: 50, top: 60, bottom: 30 };
      let colorScale = d3.scaleOrdinal().range(d3.schemeSet3);
      let dataSets;

      let categoriesNames, xScale, copy, yScale, legend;

      const setup = () => {
        //No.1 set up svg and axes, this section runs only once
        svg = d3.select("svg");
        width = +svg.attr("width") - margin.left - margin.right;
        height = +svg.attr("height") - margin.top - margin.bottom;

        g = svg
          .append("g")
          .attr(
            "transform",
            "translate(" + margin.left + "," + margin.top + ")"
          );
      };
      let xAxis, yAxis, x, y;
      const setAxes = () => {
        updateData();
        svg.select(".x.axis").remove();

        svg.select(".y.axis").remove();

        x = d3
          .scaleBand()
          .domain(arr.map((d) => d.name))
          .range([margin.left, width - margin.right])
          .padding(0.1);
        y = d3
          .scaleLinear()
          .domain([0, d3.max(stack, (d) => d3.max(d, (d) => d[1]))])
          .rangeRound([height - margin.bottom, margin.top]);
        xAxis = (g) =>
          g
            .attr("transform", `translate(0,${height - margin.bottom})`)
            .attr("class", "x axis")
            .call(d3.axisBottom(x).tickSizeOuter(0))
            .call((g) => g.selectAll(".domain").remove());
        yAxis = (g) =>
          g
            .attr("transform", `translate(${margin.left},0)`)
            .attr("class", "y axis")
            .call(d3.axisLeft(y).ticks(null, "s"))
            .call((g) => g.selectAll(".domain").remove());
        svg.append("g").call(xAxis);

        svg.append("g").call(yAxis);
      };
      setup();
      // repeat draw function
      const draw = () => {
        setAxes();
        //No.3 draw chart
        formatValue = (x) => (isNaN(x) ? "N/A" : x.toLocaleString("en"));
        let chart = svg.selectAll("rect").data(stack, (d) => d);
        chart.exit().remove();
        svg
          .append("g")
          .selectAll("g")
          .data(stack)
          .join("g")
          .attr("fill", (d) => colorScale(d.key))
          .selectAll("rect")
          .data((d) => d)
          .join("rect")
          .attr("x", (d, i) => x(d.data.name))
          .attr("y", (d) => y(d[1]))
          .attr("height", (d) => y(d[0]) - y(d[1]))
          .attr("width", x.bandwidth())
          .append("title")
          .text(
            (d) => `${d.data.name} ${d.key}
${formatValue(d.data[d.key])}`
          );

        legend = svg.selectAll(".legend").data(stack);
        legend.exit().remove();

        let newLegend = legend.enter().append("g").attr("class", "legend");

        newLegend
          .append("rect")
          .attr("x", (d, i) => i * 51 + 51)
          .attrs({ y: 0, width: 51, height: 10 })
          .style("fill", (d) => colorScale(d.key));

        newLegend
          .append("text")
          .attr("x", (d, i) => (i + 1) * 51)
          .attr("y", 25)
          .text((d) => d.key)
          .attrs({ fill: (d) => colorScale(d.key), "font-size": 12 });
      };

      setup();
      draw();

      const update = () => {
        add_set(arr);
        draw();
      };
      const remove = () => {
        remove_set(arr);
        draw();
      };
      d3.select("body")
        .append("button")
        .text("Add dataset")
        .on("click", update);
      d3.select("body")
        .append("button")
        .text("Remove dataset")
        .on("click", remove);
    </script>
  </body>
</html>
