<!DOCTYPE html>
<html>
  <head>
    <title>D3.js Function</title>

    <script src="https://d3js.org/d3.v6.min.js"></script>
    <meta charset="utf-8" />
  </head>

  <body>
    <button onclick="update()">Add dataset</button>
    <button onclick="remove()">Remove dataset</button>
    <script>
      let jsonObj = [
        {
          category: "Jan",
          values: [
            {
              value: 1,
              source: "dataset1",
            },
            {
              value: 4,
              source: "dataset2",
            },
          ],
        },
        {
          category: "Feb",
          values: [
            {
              value: 1,
              source: "dataset1",
            },
            {
              value: 21,
              source: "dataset2",
            },
          ],
        },
        {
          category: "Mar",
          values: [
            {
              value: 3,
              source: "dataset1",
            },
            {
              value: 22,
              source: "dataset2",
            },
          ],
        },
        {
          category: "April",
          values: [
            {
              value: 9,
              source: "dataset1",
            },
            {
              value: 9,
              source: "dataset2",
            },
          ],
        },
        {
          category: "May",
          values: [
            {
              value: 5,
              source: "dataset1",
            },
            {
              value: 17,
              source: "dataset2",
            },
          ],
        },
        {
          category: "June",
          values: [
            {
              value: 6,
              source: "dataset1",
            },
            {
              value: 12,
              source: "dataset2",
            },
          ],
        },
      ];
      // function for adding data, just call add_set(data) will do the job
      let counter = 2;
      const add_set = (arr) => {
        const ran = () => Math.floor(Math.random() * 20 + 1);
        const add = (arr) => {
          counter++;
          arr.map((i) =>
            i.values.push({ value: ran(), source: `dataset${counter}` })
          );
        };
        add(arr);
      };
      // function for reomving data
      const remove_set = (arr) => {
        counter--;
        arr.map((i) => i.values.pop());
      };

      const draw = (data) => {
        //No.1 define the svg
        let graphWidth = 900,
          graphHeight = 600;
        let margin = { top: 10, right: 10, bottom: 30, left: 85 };
        let totalWidth = graphWidth + margin.left + margin.right,
          totalHeight = graphHeight + margin.top + margin.bottom;
        let svg = d3
          .select("body")
          .append("svg")
          .attr("width", totalWidth)
          .attr("height", totalHeight);
        //No.2 define mainGraph
        let mainGraph = svg
          .append("g")
          .attr(
            "transform",
            "translate(" + margin.left + "," + margin.top + ")"
          );

        //No.3 define axis
        let x0 = d3.scaleBand().rangeRound([0, graphWidth]).padding(0.05),
          x1 = d3.scaleBand();
        let xAxis = d3.axisBottom(x0).tickSize(0.3);

        let categoriesNames = data.map((d) => d.category);
        let dataSources = data[0].values.map((d) => d.source);
        x0.domain(categoriesNames);
        x1.domain(dataSources).rangeRound([0, x0.bandwidth()]);
        let y = d3.scaleLinear().range([graphHeight, 0]),
          yAxis = d3.axisLeft(y).tickSize(3);
        y.domain([
          0,
          d3.max(data, (data) => d3.max(data.values, (d) => d.value)),
        ]);

        //No.4 set axis
        mainGraph
          .append("g")
          .attr("class", "x axis")
          .attr("transform", "translate(0," + graphHeight + ")")
          .call(xAxis);
        mainGraph
          .append("g")
          .attr("class", "y axis")
          .style("opacity", "0")
          .call(yAxis)
          .append("text")
          .attr("transform", "rotate(-90)")
          .attr("y", 6)
          .attr("dy", ".71em")
          .style("text-anchor", "end")
          .style("font-weight", "bold")
          .text("Value");
        mainGraph
          .select(".y")
          .transition()
          .duration(500)
          .delay(1300)
          .style("opacity", "1");
        //No.5 set bars
        let barGraph = mainGraph
          .selectAll(".bar")
          .data(data)
          .enter()
          .append("g")
          .attr("class", "g")
          .attr("transform", (d) => "translate(" + x0(d.category) + ",0)");

        let colorScale = d3.scaleOrdinal(d3.schemeCategory10);

        barGraph
          .selectAll("rect")
          .data((d) => d.values) //get data.values for each category,only put data you need
          .enter()
          .append("rect")
          .attr("width", x1.bandwidth()) // use x1's width
          .attr("x", (d) => x1(d.source))
          .style("fill", (d) => colorScale(d.source))
          .style("opacity", "0.6")
          .attr("y", (d) => y(0))
          .attr("height", (d) => graphHeight - y(0))
          .attr("class", function (d) {
            return "rect " + "color-" + colorScale(d.source).substring(1);
          }) //add class to all the rect elements
          .on("mouseover", (e, d) => {
            d3.select(e.currentTarget).style(
              "fill",
              d3.rgb(colorScale(d.source)).darker(1)
            );
          })
          .on("mouseout", (e, d) => {
            d3.select(event.currentTarget).style("fill", colorScale(d.source));
          });

        barGraph
          .selectAll("rect")
          .transition()
          .delay((d) => Math.random() * 1000)
          .duration(1000)
          .attr("y", (d) => y(d.value)) // y positon change to the value of each data
          .attr("height", (d) => graphHeight - y(d.value));
        //No.6 set lengend
        let legend = mainGraph
          .selectAll(".legend")
          .data(data[0].values.map((d) => d.source).reverse())
          .enter()
          .append("g")
          .attr("class", "legend")
          .attr("transform", (d, i) => "translate(0," + i * 20 + ")")
          .style("opacity", "0");
        legend
          .append("rect")
          .attr("x", graphWidth - 18)
          .attr("width", 18)
          .attr("height", 18)
          .style("fill", (d) => colorScale(d))
          .style("opacity", "0.5");
        legend
          .append("text")
          .attr("x", graphWidth - 24)
          .attr("y", 9)
          .attr("dy", ".35em")
          .style("text-anchor", "end")
          .text((d) => d);
        legend
          .transition()
          .duration(500)
          .delay((d, i) => 1300 + 100 * i)
          .style("opacity", "1");
        legend
          .on("mouseover", function (e, d) {
            barGraph
              .selectAll("rect.color-" + colorScale(d).substring(1))
              .style("fill", d3.rgb(colorScale(d)).darker(1));
          }) //select elements using class,and style
          .on("mouseout", function (e, d) {
            barGraph
              .selectAll("rect.color-" + colorScale(d).substring(1))
              .style("fill", d3.rgb(colorScale(d)));
          })
          .on("click", function (e, d) {
            barGraph
              .selectAll("rect.color-" + colorScale(d).substring(1))
              .remove(); //remove selected elements
            jsonObj.forEach((i) => {
              i.values = i.values.filter((s) => s.source != d);
            }); //update data
            legend
              .filter((x) => x === d)
              .style("text-decoration", "line-through");
          }); //cross out text
      };

      draw(jsonObj);

      const update = () => {
        add_set(jsonObj);
        let svg = d3.select("body").select("svg");
        svg.remove();
        draw(jsonObj);
      };
      const remove = () => {
        remove_set(jsonObj);
        let svg = d3.select("body").select("svg");
        svg.remove();
        draw(jsonObj);
      };
    </script>
    hover legend to highlight data series, click legend to delete data series
  </body>
</html>
